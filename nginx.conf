#运行用户
#user nobody;
#启动进程,通常设置成和cpu的数量相等
worker_processes 2;

#全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
#工作模式及连接数上限
events
{
  #epoll是多路复用IO(I/O Multiplexing)中的一种方式,
  #仅用于linux2.6以上内核,可以大大提高nginx的性能
  #use epoll;

  #单个后台worker process进程的最大并发链接数
  worker_connections 1024;

  # 并发总数是 worker_processes 和 worker_connections 的乘积
  # 即 max_clients = worker_processes * worker_connections
  # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
  # 为什么上面反向代理要除以4，应该说是一个经验值
  # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
  # worker_connections 值的设置跟物理内存大小有关
  # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
  # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
  # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
  # $ cat /proc/sys/fs/file-max
  # 输出 34336
  # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
  # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
  # 使得并发总数小于操作系统可以打开的最大文件数目
  # 其实质也就是根据主机的物理CPU和内存进行配置
  # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
  # ulimit -SHn 65535

}


http
{
  #设定mime类型,类型由mime.type文件定义
  include /usr/local/etc/nginx/mime.types;
  #默认文件类型，默认为text/plain
  default_type application/octet-stream;
  #设定日志格式
  #1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址；
  #2.$remote_user ：用来记录客户端用户名称；
  #3.$time_local ： 用来记录访问时间与时区；
  #4.$request ： 用来记录请求的url与http协议；
  #5.$status ： 用来记录请求状态；成功是200，
  #6.$body_bytes_sent ：记录发送给客户端文件主体内容大小；
  #7.$http_referer ：用来记录从那个页面链接访问过来的；
  #8.$http_user_agent ：记录客户端浏览器的相关信息；
  #log_format main '$remote_addr - $remote_user [$time_local] "$request" '
  #'$status $body_bytes_sent "$http_referer" '
  #'"$http_user_agent" "$http_x_forwarded_for"';

  #access_log logs/access.log main;

  #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
  #对于普通应用，必须设为 on,
  #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
  #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
  sendfile on;
  #tcp_nopush     on;

  #连接超时时间
  #keepalive_timeout  0;
  keepalive_timeout 65;
  tcp_nodelay on;

  #发送超时时间
  #字符集
  send_timeout 60;
  charset utf-8;

  #开启gzip压缩
  gzip on;
  gzip_disable "MSIE [1-6].";

  #设定请求缓冲
  client_header_buffer_size 128k;
  large_client_header_buffers 4 128k;

  #这个配置是写一组被代理的服务器地址，然后配置负载均衡的算法。这里的被代理服务器地址有2中写法。
  #轮询：nginx默认就是轮询其权重都默认为1，服务器处理请求的顺序：ABABABABAB....
  # down 表示单前的server暂时不参与负载。
  # backup 预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。 如果你有2台服务器，当一台服务器发生事故时，才启用第二台服务器给提供服务。服务器处理请求的顺序：AAAAAA突然A挂啦，BBBBBBBBBBBBBB.....
  # max_fails 允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。
  # fail_timeout 在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。
  # weight 加权轮询：跟据配置的权重的大小而分发给不同服务器不同数量的请求。如果不设置，则默认为1。下面服务器的请求顺序为：ABBABBABBABBABB....
  # ip_hash nginx会让相同的客户端ip请求相同的服务器。
  # keepalive 64 指示nginx在任何时候保持最少64个HTTP/ 1.1连接到代理服务器。如果有更多的流量nginx将打开更多的连接。
  upstream node_upstream
  {
    ip_hash;
    server 192.168.140.100:6060 weight=1 max_fails=2 fail_timeout=2;
    server 192.168.140.100:3000 weight=2 max_fails=2 fail_timeout=2;
    keepalive 64;
  }

  #设定虚拟主机配置
  server
  {
    #侦听80端口
    listen 80;
    #定义使用 www.nginx.cn访问
    server_name localhost;

    #定义服务器的默认网站根目录位置
    # root /Users/edward/workspaces/react_redux_express_mongo_redis/dist;

    #设定本虚拟主机的访问日志
    #access_log logs/nginx.access.log main;

    #默认请求
    location ~*^.+$
    {

      #定义首页索引文件的名称
      #请求转向 node_upstream 定义的服务器列表
      proxy_pass http://node_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_buffering off;
    }

    # If you're using nginx, use the try_files directive:
    # This lets nginx serve static asset files and serves your index.html file when another file isn't found on the server.
    #location / {
    #  try_files $uri /index.html;
    #}

    # 定义错误提示页面
    #error_page 500 502 503 504 /50x.html;
    #location = /50x.html
    #{
    #  root html;
    #}

    #静态文件，nginx自己处理
    #请求的url过滤，~*^.+$ 正则匹配，~为区分大小写，~*为不区分大小写。
    #location ~ ^/(images|javascript|js|css|flash|media|static)/ #如果是静态文件 则劫持处理
    #{

      #过期30天，静态文件不怎么更新，过期可以设大一点，
      #如果频繁更新，则可以设置得小一点。
      #expires 30d;
      #root /Users/edward/workspaces/react_redux_express_mongo_redis/dist;  #your project url
      #access_log off;
    #}
    #}
    #另一个写法
    #location ~ ^/(img/|js/|css/|images/|flash/|media/)$ { #如果是静态文件 则劫持处理
            #root /home/app/myapp/public;  #your project url
            #access_log off;
            #expires max;
        #}
    #}

    #禁止访问 .htxxx 文件
    #deny拒绝的ip
    #allow允许的ip
    #location ~ /.ht
    #{
    #  deny all;
    #}

  }
}
